% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse_mx801_details.R
\name{parse_mx801_details}
\alias{parse_mx801_details}
\title{Extract specific metadata items from the MX801 details sheet}
\usage{
parse_mx801_details(file)
}
\arguments{
\item{file}{The path to the calibrated Excel (\code{.xlsx}) file from the
MX801 logger}
}
\value{
A nested list with selected metadata from the details
}
\description{
This it a internal helper function to extract MX801 details (metadata)
from the third sheet of an Excel file.
}
\details{
\code{parse_mx801_details()} is kludgy because the data
is written into the details file in a fairly haphazard way.

The approach is to do a bunch of formatting of the text from the
details file to make it somewhat YAML like, to parse as YAML, and then
to do a little more cleanup and extraction.
\itemize{
\item \href{https://docs.google.com/document/d/1GKw3eq9ALigEcX_AWl4vnlejSzsTiIVHzy6LoKCR1jw}{description of the output metadata fields}.
}
}
\examples{
# parse_mx801_details() is an internal function so example code will
# only work after devtools::load_all()
\dontrun{

p <- setup_example_dir(site_filter = "BBC", year_filter = 2025,
 deployment_filter = "2025-01-04")
f <- list.files(file.path(p$deployment, "Calibrated"),
                pattern =  ".xlsx$", full.names  = TRUE )
md <- parse_mx801_details(f)
yaml::as.yaml(md) |> cat(sep = "\n")
}
}
\keyword{internal}
